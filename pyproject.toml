[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sales-command"
dynamic = ["version"]
description = "Sistema completo de gesti贸n financiera personal via CLI - Sales Command"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Developer", email = "dev@example.com"},
]
keywords = ["cli", "finanzas", "gastos", "presupuesto", "inversiones"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Utilities",
]

dependencies = [
    "click>=8.1.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "python-dateutil>=2.8.2",
    "tabulate>=0.9.0",
    "pandas>=2.1.0",
    "plotille>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.6.0",
    "types-python-dateutil>=2.8.19",
    "types-tabulate>=0.9.0",
]

[project.scripts]
sales = "src.main:app"

[project.urls]
Homepage = "https://github.com/username/sales-command"
Repository = "https://github.com/username/sales-command.git"
Issues = "https://github.com/username/sales-command/issues"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Configuraci贸n de Ruff (integrado con VS Code)
[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "C4",    # flake8-comprehensions
    "PIE",   # flake8-pie
    "PL",    # pylint
    "RUF",   # ruff-specific rules
]

ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "T201", "PLR2004"]
"src/cli/**/*.py" = ["T201"]  # Allow print in CLI modules

[tool.ruff.lint.isort]
known-first-party = ["src"]

# Configuraci贸n de mypy (integrado con VS Code)
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "plotille.*",
    "tabulate.*",
]
ignore_missing_imports = true

# Configuraci贸n de pytest (integrado con VS Code)
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=30",
    "-v",
    "--tb=short",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with -m 'not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli/main.py",  # Main CLI entry point
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]
